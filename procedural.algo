// performs a task 
// no return 
// v1 = [x1 , y1] v2 = [x2 , y2]
//   x1 = v1[0] x2 = v2[0] , y1 = v1[1]  y2 = v2[1]
// dot = x1*x2 + y1*y2
// dot = v1[0]* v2[0] + v1[1]*v2[1]
PROCEDURE dot_product(v1 , v2 : ARRAY_OF INTEGER ,VAR  dot : INTEGER )
VAR
    i : INTEGER := 0
BEGIN
    dot := 0
// != (javascript) <> (algo)
    IF (v1.length() <> v2.length() ) THEN
        dot := NaN;
    END_IF
    WHILE ( i < v1.length() ) DO
        dot := dot + v1[i]*v2[i];
        i++; // i := i+1 
    END_WHILE
END


ALGORITHM Dot product
VAR
    v1 , v2 :ARRAY_OF INTEGER[20];
    n1 , n2 : INTEGER;
    ps : INTEGER
BEGIN

    // enter taille du vecteur v1 
    n1 = read_size();
    // read elements of v1
    read_array(n1,v1);
    // read size of vector v2
    n2 = read_size();
    // read elements of vector v2
    read_array(n2,v2)
    // produit scalaire
    dot_product(v1,v2,ps)
    // 
    IF (ps = 0) THEN
        Write("v1 and v2 are orthogonal ")
    ELSE
        Write("v1 and v2 are not orthogonal")
    END_IF

END

FUNCTION dot_product_funct(v1 , v2 : ARRAY_OF INTEGER) : INTEGER
VAR
    i , dot : INTEGER := 0
BEGIN
    IF (v1.length() <> v2.length()) THEN
        RETURN dot := NaN
    END_IF
    WHILE (i < v2.length) DO
        dot := dot + v1[i]*v2[i]
    END_WHILE
    RETURN dot ;
END

ALGORITHM Dot product
VAR
    v1 , v2 :ARRAY_OF INTEGER[20];
    n1 , n2 : INTEGER;
    ps : INTEGER
BEGIN

    // enter taille du vecteur v1 
    n1 = read_size();
    // read elements of v1
    read_array(n1,v1);
    // read size of vector v2
    n2 = read_size();
    // read elements of vector v2
    read_array(n2,v2)
    // produit scalaire
    ps := dot_product_funct(v1,v2)
    // 
    IF (ps = 0) THEN
        Write("v1 and v2 are orthogonal ")
    ELSE
        Write("v1 and v2 are not orthogonal")
    END_IF

END